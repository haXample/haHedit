//----------------------------------------------------------------------------
//
//                 AesAlgorithmMac (CMAC NIST SP 800-38B)
//
// First step:  Two subkeys K1, K2 are generated from the key K.
// Second step: The input message is formatted into a sequence of complete blocks
//              in which the final block has been masked by a subkey.
// 
// There are two cases:
// If the message length is a positive multiple of the block size,
//  then the message is partitioned into complete blocks.
//  The final block is masked with the first subkey; in other words,
//  the final block in the partition is replaced
//  with the exclusive-OR of the final block with the FIRST subkey K1.
//  The resulting sequence of blocks is the formatted message
//  (no additional ISO Padding is applied).
// 
// If the message length is not a positive multiple of the block size,
//  then the message is partitioned into complete blocks
//  to the greatest extent possible, i.e., into a sequence of complete blocks
//  followed by a final bit string whose length is less than the block size.
//  A padding string is appended to this final bit string,
//  in particular, a single ‘1’ bit followed by the minimum number of ‘0’ bits,
//  possibly none, that are necessary to form a complete block (= ISO Padding).
//  The complete final block is masked, with the SECOND subkey K2.
//  The resulting sequence of blocks is the formatted message.
//
	// Generating the subkeys K1 and K2
	//	
	//  Example:
	//  Block cipher is the AES algorithm with the following 128bit key K:
	//    Key128 =      2b7e1516 28aed2a6 abf71588 09cf4f3c
	//
  	//  ( Key192 =      8E73B0F7 DA0E6452 C810F32B 809079E5	)
  	//  (               62F8EAD2 522C6B7B    		)
  	//  (				                        )
        //  ( Key256 =      603DEB10 15CA71BE 2B73AEF0 857D7781	)
  	//  (               1F352C07 3B6108D7 2D9810A3 0914DFF4	)
  	//
	//  Subkey K1, K2 Generation (128bit)
	//    CIPHK(0128) = 7df76b0c 1ab899b3 3e42f047 b91b546f
	//    K1 =          fbeed618 35713366 7c85e08f 7236a8de
	//    K2 =          f7ddac30 6ae266cc f90bc11e e46d513b
        //
        //  Example Mlen = 128bit (16Bytes):
        //    M =           6bc1bee2 2e409f96 e93d7e11 7393172a
	//
        //    T(Key128) =   070a16b4 6b4d4144 f79bdd9d d04a287c
	//
	//    T(Key192) =   9e99a7bf 31e71090 0662f65e 617c5184
	//
	//    T(Key256) =   28a7023f 452e8f82 bd4bf28d 8c37c35c
	//
        //  Example Mlen = 160bit (20Bytes):
        //    M =           6bc1bee2 2e409f96 e93d7e11 7393172a
        //                  ae2d8a57
	//
        //    T(Key128) =   7D85449E A6EA19C8 23A7BF78 837DFADE
        //
	//    T(Key192) =   3D75C194 ED960704 44A9FA7E C740ECF8
	//
	//    T(Key256) =   156727DC 0878944A 023C1FE0 3BAD6D93
	//
	//  Example Mlen = 320bit (40Bytes):
        //    M =           6bc1bee2 2e409f96 e93d7e11 7393172a
        //                  ae2d8a57 1e03ac9c 9eb76fac 45af8e51
        //                  30c81c46 a35ce411
	//
        //    T(Key128) =   dfa66747 de9ae630 30ca3261 1497c827
	// 
	//    T(Key192) =   8a1de5be 2eb31aad 089a82e6 ee908b0e
	//
	//    T(Key256) =   aaf3d8f1 de5640c2 32f5b169 b9c911e6
	//
	//  Example Mlen = 512bit (64Bytes):
        //    M =           6bc1bee2 2e409f96 e93d7e11 7393172a
        //                  ae2d8a57 1e03ac9c 9eb76fac 45af8e51
        //                  30c81c46 a35ce411 e5fbc119 1a0a52ef
        //                  f69f2445 df4f9b17 ad2b417b e66c3710
	//
        //    T(Key128) =   51f0bebf 7e3b9d92 fc497417 79363cfe
	// 
	//    T(Key192) =   a1d5df0e ed790f79 4d775896 59f39a11
	//
	//    T(Key256) =   e1992190 549f6ed5 696a2c05 6c315410
